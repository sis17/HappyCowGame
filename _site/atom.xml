<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Happy Cow Game</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2015-02-24T13:01:02+00:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name>Simeon Smith</name>
   <email>sis17@aber.ac.uk</email>
 </author>

 
 <entry>
   <title>Week 4 - 16th-21st February.</title>
   <link href="http://username.github.io/progress/2015/02/21/week4"/>
   <updated>2015-02-21T00:00:00+00:00</updated>
   <id>http://username.github.io/progress/2015/02/21/week4</id>
   <content type="html">&lt;h3 id=&quot;catch-up&quot;&gt;Catch Up&lt;/h3&gt;
&lt;p&gt;I actually did not finish writing up the designs last week, so spent the first day of this week finalising them ready to show to my supervisor and client. They were satisfied with them, and I could then get cracking on the development.&lt;/p&gt;

&lt;h3 id=&quot;making-mockups-come-alive&quot;&gt;Making Mockups Come Alive&lt;/h3&gt;
&lt;p&gt;I had the four phases of the main game phase as four different pages already. My plan was to make these partly functional pages, pulling static data from the server. The second phase of development in a few weeks time would then be to persist data on the server, and actually make the game playable.&lt;/p&gt;

&lt;p&gt;This worked quite well. I had taken a bit of time to familarise myself with AngularJS, the client side choise of framework, and read a few chapters about simple development in the O’Reilley guide. However, the best way to learn a language is to take time reading, but also write a substantial project using it, otherwise all the information too easily slips from one’s head. I began development, quickly ran into problems, but uncovered mis-understandings of how AngularJS is used, and bit by bit learned how best to use it.&lt;/p&gt;

&lt;h3 id=&quot;a-server-and-development-process&quot;&gt;A Server and Development Process&lt;/h3&gt;
&lt;p&gt;In order for others to test the game, it needs to be hosted in a place that can support a Ruby on Rails application. I found that RedHat offer free hosting for up to three web applications, and give support for Ruby on Rails as well. Their system can pull a project directly from GitHub and then deploy it. I spent a few hours setting this up, and creating a Rails framework &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Week 3 - 9th-13th February.</title>
   <link href="http://username.github.io/progress/2015/02/14/week3"/>
   <updated>2015-02-14T00:00:00+00:00</updated>
   <id>http://username.github.io/progress/2015/02/14/week3</id>
   <content type="html">&lt;p&gt;Resources from this week are available &lt;a href=&quot;http://sis17.github.io/HappyCowGame/designs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;design-documentation&quot;&gt;Design Documentation&lt;/h3&gt;
&lt;p&gt;At the beginning of this week I began to make some HTML template pages to get a firmer idea of how they game would work. Such as how the client side would work, what resources were necessary to persist, ect. This was helpful, but made me want to dive straight into the development. I continued with the designs, however, and met more problems that were worthy of thinking about. When I start development, it should now be fairly simple to take the existing templates and work towards the plan of the design. I will almost certainly need to make changes along the way, but at least I have thought about most aspects and taken the time to write these thoughts down.&lt;/p&gt;

&lt;h3 id=&quot;database-design&quot;&gt;Database Design&lt;/h3&gt;
&lt;p&gt;This was probably the most difficult part of the planning. It also has the largest effect on the structure of the project.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Week 2 - 2nd-6th February.</title>
   <link href="http://username.github.io/progress/2015/02/06/week2"/>
   <updated>2015-02-06T00:00:00+00:00</updated>
   <id>http://username.github.io/progress/2015/02/06/week2</id>
   <content type="html">&lt;h3 id=&quot;requirements-analysis&quot;&gt;Requirements Analysis&lt;/h3&gt;

&lt;h3 id=&quot;the-necessity-of-phases&quot;&gt;The Necessity of Phases&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Week 1 - 26th-30th January.</title>
   <link href="http://username.github.io/progress/2015/01/31/week1"/>
   <updated>2015-01-31T00:00:00+00:00</updated>
   <id>http://username.github.io/progress/2015/01/31/week1</id>
   <content type="html">&lt;h3 id=&quot;research&quot;&gt;Research&lt;/h3&gt;

&lt;p&gt;Most of the week was taken up looking into various web technologies. This was a preliminary step in order to decide how best to  implement a board game as a web application.&lt;/p&gt;

&lt;p&gt;I found various platforms for mobile and native apps that help with HTML5 and Javascript games, but nothing that specifically promised a platform for a web application based on a board game, and offered persistence of data so that players at different machines could take turns.&lt;/p&gt;

&lt;p&gt;Another league of possibilities was already existing board game platforms. Among these Vassal and BoardGameArena stood out. Vassal is a platform for distributing and playing board games with friends over several types of connections. However, it does not natively support game rules, players must carry these out themselves. BoardGameArena allows players to design games, and they will be automatically supported with login, a waiting room for players to join, ect. However, it’s documentation and set of existing games was quite limited.&lt;/p&gt;

&lt;p&gt;I therefore decided it would be best to build a standard web application geared to host a board game. I came across Single Page Applications (SPA) and found they were supported by various Javascript frameworks such as Backbone.js, and Angular.js. The standard procedure is to use these on the client side to simulate game play, while relying on a server-side RESTful framework written in Ruby on Rails (for example).&lt;/p&gt;

&lt;p&gt;I also looked into Node.js and some other technologies before sticking to the one above.&lt;/p&gt;

&lt;h3 id=&quot;writing-and-outline&quot;&gt;Writing and Outline&lt;/h3&gt;

&lt;p&gt;A required document in the module process is the outline specification: documentation to help us get started with planning and thinking about the project as a whole. This was fairly straightforward. We needed to write an overview of the project, a list of key and perhaps difficult tasks, and a list of deliverables.&lt;/p&gt;

&lt;p&gt;It was good to think about potentially challenging parts of the project. These include the database design, animation and control of the game through the user interface, and various other pages.&lt;/p&gt;

&lt;p&gt;The list of deliverables was harder to create. But after thinking about various challenging stages, and what documentation would be needed to work out what to do, I came up with a fairly normal set of deliverables: requirements analysis, design documentation, platform analysis, a user interface prototype, server and client side implementations, tests, maintenance documentation and the necessary final report.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-blog&quot;&gt;Setting up a Blog&lt;/h3&gt;

&lt;p&gt;This was another task of the week. In order to implement the blog along side the github repository I would be using for the Happy Cow Game project, I decided to use github pages. Jekyll is a service that allows you to write blog entries in mark down, which are then compiled and can be uploaded to be parsed without the need for a server side language. So that is how these blog posts are written.&lt;/p&gt;

&lt;h3 id=&quot;experiments-and-learning&quot;&gt;Experiments and Learning&lt;/h3&gt;

&lt;p&gt;When looking into technologies I did a few tutorials to learn a bit more about them before committing to using them for an entire project. Among these were a Cappuccino tutorial to make a image rotator. Cappuccino and Objective-J are nice technologies, but not fully suited to the application I wanted to create. I then went on and discovered Backbone and Angular, Javascript libraries. After following a basic tutorial for angular, I implemented a small app I found as an example of Backbone, using the Angular framework. It is hosted &lt;a href=&quot;here&quot;&gt;http://users.aber.ac.uk/sis17/projects/todo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating an SPA with Bootstrap and AngularJs.</title>
   <link href="http://username.github.io/research/framework/2015/01/30/creating-spa-bootstrap-and-angular"/>
   <updated>2015-01-30T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/30/creating-spa-bootstrap-and-angular</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://phpro.org/tutorials/Create-A-Single-Page-Application-Using-Templates-With-Angularjs-And-Bootstrap.html&quot;&gt;http://phpro.org/tutorials/Create-A-Single-Page-Application-Using-Templates-With-Angularjs-And-Bootstrap.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Comparing Client Side Frameworks - Backbone, Ember and Angular.</title>
   <link href="http://username.github.io/research/framework/2015/01/30/comparing-client-side-frameworks"/>
   <updated>2015-01-30T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/30/comparing-client-side-frameworks</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.airpair.com/js/javascript-framework-comparison&quot;&gt;https://www.airpair.com/js/javascript-framework-comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The top result, and most used of the three, is Angular.js. Although the benefits and drawbacks of all three are fairly presented.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Choose Angular.js over Backbone.js.</title>
   <link href="http://username.github.io/design/2015/01/30/angular-over-backbone"/>
   <updated>2015-01-30T00:00:00+00:00</updated>
   <id>http://username.github.io/design/2015/01/30/angular-over-backbone</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://blog.nebithi.com/backbone-and-angular-demystifying-the-myths/&quot;&gt;http://blog.nebithi.com/backbone-and-angular-demystifying-the-myths/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An Angular.js Tutorial.</title>
   <link href="http://username.github.io/research/framework/2015/01/30/agular-tutorial"/>
   <updated>2015-01-30T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/30/agular-tutorial</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;https://docs.angularjs.org/tutorial&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Project Scope - some thoughts.</title>
   <link href="http://username.github.io/design/2015/01/29/project-scope"/>
   <updated>2015-01-29T00:00:00+00:00</updated>
   <id>http://username.github.io/design/2015/01/29/project-scope</id>
   <content type="html">&lt;h3 id=&quot;what-is-scope&quot;&gt;What is Scope?&lt;/h3&gt;

&lt;p&gt;“Project scope is the part of project planning that involves determining and documenting a list of specific project goals, deliverables, tasks, costs and deadlines.”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;definition from &lt;a href=&quot;searchcio.techtarget.com/definition/project-scope&quot;&gt;searchcio.techtarget.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;determined-project-goals&quot;&gt;Determined Project Goals&lt;/h3&gt;
&lt;p&gt;The Happy Cow board game must be playable as originally created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Players can log in or sign up&lt;/li&gt;
  &lt;li&gt;Players choose an existing game, or make one with friends at the same machine&lt;/li&gt;
  &lt;li&gt;Players each hace a deck of cards, get more cards and can lay cards&lt;/li&gt;
  &lt;li&gt;There are turns and phases&lt;/li&gt;
  &lt;li&gt;Players can choose which package to animage, and choose between dice amounts&lt;/li&gt;
  &lt;li&gt;Players can move their packages with mouse interaction&lt;/li&gt;
  &lt;li&gt;Packages can be damaged&lt;/li&gt;
  &lt;li&gt;Information about the cow is always visible, to show cow health, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;possible-extra-goals&quot;&gt;Possible Extra Goals&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Messaging between players, in and out of games&lt;/li&gt;
  &lt;li&gt;Cards can be adaptable, players can therefore choose which deck to play with when starting&lt;/li&gt;
  &lt;li&gt;More specific ingredients can be created and used, with extra side effects&lt;/li&gt;
  &lt;li&gt;2 game types, between players across a network, and with players at the same machine&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>What is a game?</title>
   <link href="http://username.github.io/research/2015/01/29/paper-on-game-theory"/>
   <updated>2015-01-29T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/29/paper-on-game-theory</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://gamestudies.org/1401/articles/arjoranta&quot;&gt;http://gamestudies.org/1401/articles/arjoranta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a paper about how to define games, common problems when defining games. It does not relate to board games specifically, or even online,
or web-based games, so I did not read much of it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A variety of game engines.</title>
   <link href="http://username.github.io/research/theory/2015/01/29/game-engines"/>
   <updated>2015-01-29T00:00:00+00:00</updated>
   <id>http://username.github.io/research/theory/2015/01/29/game-engines</id>
   <content type="html">&lt;h3 id=&quot;photon&quot;&gt;Photon&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.exitgames.com/en/Turnbased&quot;&gt;https://www.exitgames.com/en/Turnbased&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Has an impressive portfolio of games developed using it. It allows games to be quickly and easly deployed world wide with cloud server hosting
and pre-built game components, such as matching players and putting them in a game together.&lt;/p&gt;

&lt;p&gt;It’s a bit pricy though, and does not focus on board games.&lt;/p&gt;

&lt;h3 id=&quot;coco2d-x&quot;&gt;Coco2D-x&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cocos2d-x.org/wiki&quot;&gt;http://www.cocos2d-x.org/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the open source version of the Coco2D platform. It can be used to make 2D games, or simple 3D adventure games. Commonly used for 
mobile game development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/12022/how-to-make-a-turn-based-strategy-game-part-1&quot;&gt;http://www.raywenderlich.com/12022/how-to-make-a-turn-based-strategy-game-part-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the tutorial I found about Coco2D.&lt;/p&gt;

&lt;h3 id=&quot;vassal&quot;&gt;Vassal&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vassalengine.org/wiki/Overview&quot;&gt;http://www.vassalengine.org/wiki/Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not web based, but runs on client Java software. Players make decisions and the game updates other players via the game engine messaging
or via email. It is designed for board games.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8148477&quot;&gt;https://news.ycombinator.com/item?id=8148477&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article explains a bit more about Vassal, it often does not implement any rules, but expects players to behave as if they were playing
the board game themselves.&lt;/p&gt;

&lt;h3 id=&quot;boardgameareana&quot;&gt;BoardGameAreana&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://en.boardgamearena.com/#!doc/Studio&quot;&gt;http://en.boardgamearena.com/#!doc/Studio&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Game Design Fundamentals.</title>
   <link href="http://username.github.io/research/framework/2015/01/29/game-design-fundamentals"/>
   <updated>2015-01-29T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/29/game-design-fundamentals</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://gamifique.files.wordpress.com/2011/11/1-rules-of-play-game-design-fundamentals.pdf&quot;&gt;https://gamifique.files.wordpress.com/2011/11/1-rules-of-play-game-design-fundamentals.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A book on game design.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Articles on game design.</title>
   <link href="http://username.github.io/research/framework/2015/01/29/game-design"/>
   <updated>2015-01-29T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/29/game-design</id>
   <content type="html">&lt;p&gt;Slightly relevant, and intresting to me.&lt;/p&gt;

&lt;h3 id=&quot;learn-board-game-design&quot;&gt;Learn Board Game Design&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://gamedevelopment.tutsplus.com/articles/how-to-learn-board-game-design-and-development--gamedev-11607&quot;&gt;http://gamedevelopment.tutsplus.com/articles/how-to-learn-board-game-design-and-development–gamedev-11607&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;policy-of-game-publishers&quot;&gt;Policy of Game Publishers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://nickbentleygames.wordpress.com/2013/09/30/board-game-publishers-are-doing-it-wrong/&quot;&gt;https://nickbentleygames.wordpress.com/2013/09/30/board-game-publishers-are-doing-it-wrong/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Loading external files for Underscore.js.</title>
   <link href="http://username.github.io/research/2015/01/28/require-for-templates"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/require-for-templates</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.safaribooksonline.com/library/view/developing-backbonejs-applications/9781449328535/ch04s03.html&quot;&gt;https://www.safaribooksonline.com/library/view/developing-backbonejs-applications/9781449328535/ch04s03.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This blog explains that require.js is used for loading in libraries, Javascript, CSS, ect. However, it can also be used to load in templates
when using Underscore.js, Handlebars.js or Moustache.js to render templates in a Javascript framework.&lt;/p&gt;

&lt;p&gt;This was good news as it saved me from making a poor hand written attempt with and Ajax request.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Objective-j - extending javascript.</title>
   <link href="http://username.github.io/research/framework/language/2015/01/28/objective-j"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/language/2015/01/28/objective-j</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.cappuccino-project.org/learn/objective-j.html&quot;&gt;http://www.cappuccino-project.org/learn/objective-j.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Objective-j is an object oriented language built on top of Javascript. It is provided via the Cappuccino framework. Some of it’s features are 
explained below.&lt;/p&gt;

&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;

&lt;p&gt;Classes are introduced in the following way. The class is everything between the implimentation and end.&lt;/p&gt;

&lt;p&gt;```
@implementation Person : CPObject 
{&lt;/p&gt;

&lt;p&gt;}
@end
```&lt;/p&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
- (void)setName:(CPString)aName
{
    name = aName;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The - means the method is private. + makes it public.&lt;/p&gt;

&lt;p&gt;(void) is the return type, this can be any type or object.&lt;/p&gt;

&lt;p&gt;(CPString)aName is a parameter, with type and name of the variable. With more than one parameter a colon seperator is used:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
- (void)setJobTitle:(CPString)aJobTitle company:(CPString)aCompany
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nouns vs. Verbs, OO vs. Functional programming.</title>
   <link href="http://username.github.io/research/2015/01/28/nounds-and-verbs"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/nounds-and-verbs</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://steve-yegge.blogspot.co.uk/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;http://steve-yegge.blogspot.co.uk/2006/03/execution-in-kingdom-of-nouns.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nouns are things like rocks, trees, houses, people, heads and hands. Verbs are actions, run, do, take out the garbage, eat. We use both nouns and verbs
in every day life to accomplish actions on things. However, OO languages, especially Java, restricts users to attaching verbs to nouns. This
can be counter-intuitive at times, by being over restrictive. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Node Beginner - learning to use node.js.</title>
   <link href="http://username.github.io/research/2015/01/28/learning-node"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/learning-node</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.nodebeginner.org/&quot;&gt;http://www.nodebeginner.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;rd-generation-javascript&quot;&gt;3rd Generation Javascript&lt;/h3&gt;

&lt;p&gt;Node.js is Javascript in it’s third generation. First Javascript created small changes on static HTML pages, such as displaying dates and
changing colours. Then in the second generation it supported Ajax requests to asyncronously load data to a page, querying the server behind
the scenes. In this generation Javascript runs the webserver itself, it has moved server side to generate web pages. So this is Javascript
with even more power, the whole web-stack in one language.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Why use Node.js?</title>
   <link href="http://username.github.io/research/2015/01/28/compare-node-to-standard"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/compare-node-to-standard</id>
   <content type="html">&lt;h3 id=&quot;comparing-nodejs-vs-php-with-apache&quot;&gt;Comparing Node.js vs. PHP with Apache&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7419976/whats-advantages-on-using-node-js-node-http-server-over-php-ruby-etc-nginx&quot;&gt;http://stackoverflow.com/questions/7419976/whats-advantages-on-using-node-js-node-http-server-over-php-ruby-etc-nginx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choice of framework depends on what you are trying to do.&lt;/p&gt;

&lt;p&gt;Node.js is quick and fast. It lets you implement more functionallity from scratch, and is a learning experience.&lt;/p&gt;

&lt;p&gt;More developed frameworks such as Rails is safer, and provides more documentation, but can force your hand by requiring an application to be 
created in a certain way.&lt;/p&gt;

&lt;h3 id=&quot;comparing-nodejs-vs-other-frameworks&quot;&gt;Comparing Node.js vs. Other Frameworks&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@sagish/intro-why-i-chose-node-js-over-ruby-on-rails-905b0d7d15c3&quot;&gt;https://medium.com/@sagish/intro-why-i-chose-node-js-over-ruby-on-rails-905b0d7d15c3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This chap’s opinion is that Node.js provides a lightweight and fast alternative to other server-framework varients. He liked programming in 
Javascript (a taste I don’t fully share), and so was thrilled to discover Node.js and soon fell in love.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A guide to Backbone.js.</title>
   <link href="http://username.github.io/research/framework/2015/01/28/backbone-guide"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/28/backbone-guide</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://addyosmani.github.io/backbone-fundamentals/&quot;&gt;http://addyosmani.github.io/backbone-fundamentals/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A helpful guide into Backbone.js, what it is, why an MVC framework is necessary, and more detail on using 
Backbone’s Model, View and Event classes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Backbone - a frontend JS framework.</title>
   <link href="http://username.github.io/research/2015/01/28/backbone"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/backbone</id>
   <content type="html">&lt;h3 id=&quot;backbonejs&quot;&gt;Backbone.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://backbonejs.org/&quot;&gt;http://backbonejs.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users a model view approach to automatically save data to the server and update the page.&lt;/p&gt;

&lt;p&gt;Works well with REST. It is commonly used to implement a Single Page Application (SPA) on top of a RESTful API.&lt;/p&gt;

&lt;h3 id=&quot;underscorejs&quot;&gt;Underscore.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://underscorejs.org&quot;&gt;http://underscorejs.org&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Atom text editor.</title>
   <link href="http://username.github.io/research/2015/01/28/atom"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/28/atom</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;https://atom.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A text editor I decided to try. It has links with Github.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is the Tizen platform?</title>
   <link href="http://username.github.io/research/2015/01/27/tizen"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/tizen</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;developer.tizen.org&quot;&gt;http://developer.tizen.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When researching platforms often used to develop web applications I came across Tizen. 
It is an open source engine to aid developers construct feature-rich web applications.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spring</title>
   <link href="http://username.github.io/2015/01/27/spring"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/2015/01/27/spring</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/docs/Spring-MVC-step-by-step/&quot;&gt;http://docs.spring.io/docs/Spring-MVC-step-by-step/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spring is a framework for Java to build web apps. It does not seem to offer any special support for games, but is designed for large scale web
applications that rely on Java. As I already know more about PHP - Zend or Ruby on Rails, I didn’t delve any further.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cappuccino - a tool for web applications.</title>
   <link href="http://username.github.io/research/2015/01/27/objective-j"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/objective-j</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.stateofcode.com/2011/07/francisco-tolmasky/&quot;&gt;http://www.stateofcode.com/2011/07/francisco-tolmasky/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The creator of Objective-J talks about why they made it, and what it is good for. It is an extension of Javascript wich allows an object-oriented approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Engines and tools for developing web games - Mozilla.</title>
   <link href="http://username.github.io/research/2015/01/27/mozilla-game-engine-and-tools"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/mozilla-game-engine-and-tools</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Tools/Engines_and_tools&quot;&gt;https://developer.mozilla.org/en-US/docs/Games/Tools/Engines_and_tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mozilla has some helpful guides for developing ‘web applications’. However, it focuses on HTML5 and Javascript games, without going into detail about server side frameworks.&lt;/p&gt;

&lt;p&gt;It introduces the HTML5 element ‘canvas’ for 2D games, and WebGL for 3D games. It also includes a list of technologies to aid game developemnt on the client side.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Considerations when developing games - Mozilla.</title>
   <link href="http://username.github.io/research/2015/01/27/mozilla-game-considerations"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/mozilla-game-considerations</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Games/Special_considerations&quot;&gt;https://developer.mozilla.org/en-US/Apps/Build/Games/Special_considerations&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google game API.</title>
   <link href="http://username.github.io/research/2015/01/27/google-game-api"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/google-game-api</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://developers.google.com/games/services/web/gettingstarted&quot;&gt;https://developers.google.com/games/services/web/gettingstarted&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Google Play Game Services offer good support for simple client side games that need a way to authenticate users and provide levels, 
leaderboards, or achievements. However, it does not offer anything else, and so does not fulfill the scope required by my project.&lt;/p&gt;

&lt;p&gt;If there was not a need for data to be persisted, it would be a viable option. The game could be played in one sitting with users at the same
machine/interface, and then user’s scores could be maintained. However, that type of application is overly simplistic for the level of project
I want to build.&lt;/p&gt;

&lt;p&gt;Using OAuth is something to keep in mind, however. An extra feature could be logging in via Google or Facebook.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client side storage for web applications.</title>
   <link href="http://username.github.io/research/2015/01/27/clientside-storage"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/clientside-storage</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.webdirections.org/blog/webstorage-persistent-client-side-data-storage/&quot;&gt;http://www.webdirections.org/blog/webstorage-persistent-client-side-data-storage/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 2 types of client side storage possible: session storage and local storage. Both allow an application to store data in the web browser
between page requests, making session easier and smoother to manage. Local storage is a persistent version of session storage, available to any tab
 and accessible forever, unless deleted by the application. There is a 5MB limit on storage per application imposed by the browsers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client vs. Server? Or how about React.js?</title>
   <link href="http://username.github.io/research/2015/01/27/client-vs-server-react"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/client-vs-server-react</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://eflorenzano.com/blog/2014/01/23/react-finally-server-client/&quot;&gt;http://eflorenzano.com/blog/2014/01/23/react-finally-server-client/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React.js is a library which helps to blend client and server interaction. A common problem in web applications is that a page loads, but data and widgets
must then be assembled, taking time before all the content of the page can be seen. Yet this information should have been available from the start,
based on the request given to the server.&lt;/p&gt;

&lt;p&gt;So React.js is a library that manages two DOM trees, one that is actually Javascript, and another which returns a string, and can be quickly rendered to a page.
There are a number of technologies that, when combined with React.js, could make web applications smooth and sensible.&lt;/p&gt;

&lt;p&gt;This is something to consider learning and using in my project.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cappuccino - a tool for web applications.</title>
   <link href="http://username.github.io/research/framework/2015/01/27/cappuccino"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/framework/2015/01/27/cappuccino</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.cappuccino-project.org&quot;&gt;http://www.cappuccino-project.org&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A good question.</title>
   <link href="http://username.github.io/research/2015/01/27/best-approach"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/best-approach</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.quora.com/What-is-the-best-server-side-platform-for-developing-multi-player-games-like-words-with-friends-dots-etc&quot;&gt;http://www.quora.com/What-is-the-best-server-side-platform-for-developing-multi-player-games-like-words-with-friends-dots-etc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is the best server side platform for developing multi-player games? Is the question on the forum, and what I was looking for.&lt;/p&gt;

&lt;p&gt;It turns out the answer agreed with the rest of my research this afternoon: use a server side framework to create a RESTful API, and then
access it with Ajax requests from the client. This allows the logic to be firmly controlled by the server application, yet the client can
take any shape and form, mobile or other.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>280Slides example.</title>
   <link href="http://username.github.io/research/2015/01/27/280slides-example"/>
   <updated>2015-01-27T00:00:00+00:00</updated>
   <id>http://username.github.io/research/2015/01/27/280slides-example</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://agbeat.com/social-media/280-slides-presentation-app-to-finally-shut-down-services-next-month/&quot;&gt;http://agbeat.com/social-media/280-slides-presentation-app-to-finally-shut-down-services-next-month/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A smooth and easy to use web application built with Cappuccino.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
